# -*- coding: utf-8 -*-
"""Copia de Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AULjvFT7HqkBJgozuwIQKZHYSbyZvHmA
"""



import nest_asyncio
import asyncio
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from telegram import Bot

# Configurar Nest Asyncio
nest_asyncio.apply()

# Configurar el bot de Telegram
TOKEN = "8173186457:AAG5Gapk8y1xKFbcTaW2KA50FeFGIoZjJfY"


CHAT_ID = 2130752167
bot = Bot(token=TOKEN)

# Generar datos de ejemplo
data = pd.DataFrame({
    'goles_local': np.random.randint(0, 5, 100),
    'goles_visitante': np.random.randint(0, 5, 100),
    'posesion_local': np.random.randint(30, 70, 100),
    'posesion_visitante': np.random.randint(30, 70, 100),
    'remates_local': np.random.randint(1, 20, 100),
    'remates_visitante': np.random.randint(1, 20, 100),
    'resultado': np.random.choice([0, 1, 2], 100)  # 0 = empate, 1 = local gana, 2 = visitante gana
})

# Separar datos en entrenamiento y prueba
X = data.drop(columns=['resultado'])
y = data['resultado']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Entrenar modelo de Random Forest
modelo = RandomForestClassifier(n_estimators=100, random_state=42)
modelo.fit(X_train, y_train)

# Crear ejemplo de predicción
nuevo_partido = pd.DataFrame({
    'goles_local': [1],
    'goles_visitante': [2],
    'posesion_local': [55],
    'posesion_visitante': [45],
    'remates_local': [10],
    'remates_visitante': [8]
})

# Realizar la predicción
prediccion = modelo.predict(nuevo_partido)[0]
resultados_map = {0: 'Empate', 1: 'Gana Local', 2: 'Gana Visitante'}
resultado_prediccion = resultados_map[prediccion]

# Enviar mensaje a Telegram
MENSAJE = f"📢 Predicción del partido: {resultado_prediccion}"

async def enviar_mensaje():
    await bot.send_message(chat_id=CHAT_ID, text=MENSAJE)

# Ejecutar la función asíncrona
loop = asyncio.get_event_loop()
loop.run_until_complete(enviar_mensaje())

print("✅ Predicción enviada a Telegram.")



import telegram
print("La librería telegram se ha importado correctamente.")

TOKEN = "8173186457:AAG5Gapk8y1xKFbcTaW2KA50FeFGIoZjJfY"
CHAT_ID = "2130752167"

from telegram import Bot

bot = Bot(token=TOKEN)
bot.send_message(chat_id=CHAT_ID, text="¡Hola, Vikingo! Tu bot está funcionando. 🚀")

import asyncio
from telegram import Bot

async def enviar_mensaje():
    bot = Bot(token=TOKEN)
    await bot.send_message(chat_id=CHAT_ID, text="¡Hola, Vikingo! Tu bot está funcionando. 🚀")

asyncio.run(enviar_mensaje())

import nest_asyncio
import asyncio
from telegram import Bot

# Permitir múltiples loops en Google Colab
nest_asyncio.apply()

async def enviar_mensaje():
    bot = Bot(token=TOKEN)
    await bot.send_message(chat_id=CHAT_ID, text="¡Hola, Vikingo! Tu bot está funcionando. 🚀")

# Ejecutar la función en el loop actual
asyncio.get_event_loop().run_until_complete(enviar_mensaje())

TOKEN = "8173186457:AAHtCErhB1pgB0fuwqnNKP9xoTZ69Gqb39Y"

import asyncio
from telegram import Bot

TOKEN = "8173186457:AAHtCErhB1pgB0fuwqnNKP9xoTZ69Gqb39Y"
CHAT_ID = "2130752167"

async def enviar_mensaje():
    bot = Bot(token=TOKEN)
    await bot.send_message(chat_id=CHAT_ID, text="¡Hola, Vikingo! Tu bot está funcionando. 🚀")

# Ejecutar la función en el loop actual
asyncio.get_event_loop().run_until_complete(enviar_mensaje())

import asyncio
import telegram

# Configurar el bot con tu token
TOKEN = "8173186457:AAHtCErhB1pgB0fuwqnNKP9xoTZ69Gqb39Y"
CHAT_ID = "2130752167"
bot = telegram.Bot(token=TOKEN)

async def enviar_predicciones(predicciones):
    mensaje = "\n".join(predicciones)
    await bot.send_message(chat_id=CHAT_ID, text=f"📊 *Nuevas Predicciones de Apuestas:*\n{mensaje}", parse_mode="Markdown")

# Simulación de predicciones obtenidas
def obtener_predicciones():
    # Aquí iría el código de análisis y predicción
    return [
        "🏆 Flamengo vs Palmeiras - Gana Flamengo",
        "⚽ Santos vs Corinthians - Más de 2.5 goles",
        "🔥 Atlético MG vs São Paulo - Ambos equipos marcan"
    ]

# Ejecutar el envío de predicciones
async def main():
    predicciones = obtener_predicciones()
    await enviar_predicciones(predicciones)

# Iniciar el proceso en el loop de eventos
asyncio.run(main())



import asyncio
import schedule
import time
from telegram import Bot

# Token y Chat ID de tu bot
TOKEN = "8173186457:AAHtCErhB1pgB0fuwqnNKP9xoTZ69Gqb39Y"
CHAT_ID = "2130752167"

bot = Bot(token=TOKEN)

async def enviar_mensaje():
    mensaje = "⚽ Predicción de partidos: \n🔥 Equipo A vs Equipo B - Gana Equipo A"
    await bot.send_message(chat_id=CHAT_ID, text=mensaje)

# Función que se ejecutará automáticamente
def tarea_programada():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(enviar_mensaje())

# Programamos el bot para que envíe mensajes cada día a las 9:00 AM
schedule.every().day.at("09:00").do(tarea_programada)

# Mantener la ejecución en un bucle infinito
while True:
    schedule.run_pending()
    time.sleep(60)

import requests
import asyncio
from telegram import Bot

# Configuración del bot de Telegram
TOKEN = "8173186457:AAHtCErhB1pgB0fuwqnNKP9xoTZ69Gqb39Y"
CHAT_ID = "2130752167"
bot = Bot(token=TOKEN)

# Función para obtener partidos y probabilidades en tiempo real
def obtener_predicciones():
    url = "https://api.the-odds-api.com/v4/sports/soccer_brazil_serie_a/odds/?apiKey=a6fdcc949cb6e52a9f9fbbfff6e44b30&regions=us&markets=h2h&oddsFormat=decimal"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return []

# Función para calcular el stake dinámico según la confianza
def calcular_stake(probabilidad):
    if probabilidad >= 80:
        return 5  # Stake alto
    elif probabilidad >= 65:
        return 3  # Stake medio
    else:
        return 1  # Stake bajo

# Función para procesar las apuestas y enviar mensajes
async def procesar_apuestas():
    datos = obtener_predicciones()
    if not datos:
        return

    mejores_apuestas = []
    for partido in datos:
        equipo1 = partido["home_team"]
        equipo2 = partido["away_team"]
        odds = partido["bookmakers"][0]["markets"][0]["outcomes"]

        for apuesta in odds:
            equipo = apuesta["name"]
            cuota = float(apuesta["price"])
            probabilidad = round((1 / cuota) * 100, 2)

            if probabilidad >= 70:  # Solo considerar apuestas con alta probabilidad
                stake = calcular_stake(probabilidad)
                mejores_apuestas.append(f"⚽ Partido: {equipo1} vs {equipo2}\n🏆 Apuesta: {equipo}\n💰 Cuota: {cuota}\n📊 Probabilidad: {probabilidad}%\n🎯 Stake: {stake}")

    if mejores_apuestas:
        mensaje = "\n\n".join(mejores_apuestas)
        await bot.send_message(chat_id=CHAT_ID, text=mensaje)

# Ejecutar el proceso asincrónico
import nest_asyncio
nest_asyncio.apply()

import asyncio
import asyncio

if __name__ == "__main__":
    asyncio.run(procesar_apuestas())


print(mejores_apuestas)

import asyncio
from telegram import Bot

TOKEN = "8173186457:AAHtCErhB1pgB0fuwqnNKP9xoTZ69Gqb39Y"
CHAT_ID = "2130752167"

async def enviar_mensaje():
    bot = Bot(token=TOKEN)
    await bot.send_message(chat_id=CHAT_ID, text="🚀 Prueba de mensaje desde el bot")

asyncio.run(enviar_mensaje())

import asyncio
import nest_asyncio
import aiohttp
from telegram import Bot

# Aplicar nest_asyncio para evitar errores en Colab
nest_asyncio.apply()

# Configuración de Telegram
TOKEN = "7534747872:AAEYVDjR-uCI8ljguPCFnbKFZM4BI9IG0-k"
CHAT_ID = "2130752167"
bot = Bot(token=TOKEN)

# Configuración de The Odds API
API_KEY = "a6fdcc949cb6e52a9f9fbbfff6e44b30"
SPORT = "soccer_brazil_campeonato"  # Brasileirão Série A
REGION = "us"  # Ajusta a tu preferencia
URL = f"https://api.the-odds-api.com/v4/sports/{SPORT}/odds/?apiKey={API_KEY}&regions={REGION}&markets=h2h,totals"

# Función para obtener apuestas en tiempo real
async def obtener_apuestas():
    async with aiohttp.ClientSession() as session:
        async with session.get(URL) as response:
            if response.status == 200:
                datos = await response.json()
                print("📊 Datos de apuestas recibidos:", datos)  # Depuración
                return datos
            else:
                print(f"❌ Error en la API: {response.status}")
                return []

# Función para procesar y filtrar las mejores apuestas
async def procesar_apuestas():
    datos_apuestas = await obtener_apuestas()
    mejores_apuestas = []

    for evento in datos_apuestas:
        partido = f"{evento['home_team']} vs {evento['away_team']}"
        mejores_cuotas = []

        for book in evento.get("bookmakers", []):
            for market in book.get("markets", []):
                if market["key"] == "h2h":  # Apuestas 1X2 (Victoria/Empate/Derrota)
                    odds = market["outcomes"]
                    mejores_cuotas.append(
                        f"🏆 {book['title']}: {odds[0]['name']} ({odds[0]['price']}) / {odds[1]['name']} ({odds[1]['price']})"
                    )

        if mejores_cuotas:
            mensaje = f"⚽ {partido}\n" + "\n".join(mejores_cuotas)
            mejores_apuestas.append(mensaje)

    if mejores_apuestas:
        mensaje_final = "🔥 Mejores apuestas disponibles:\n\n" + "\n\n".join(mejores_apuestas)
        await bot.send_message(chat_id=CHAT_ID, text=mensaje_final)
    else:
        print("⚠️ No se encontraron apuestas con alto valor.")

# Ejecutar el proceso de apuestas en tiempo real
asyncio.get_event_loop().run_until_complete(procesar_apuestas())